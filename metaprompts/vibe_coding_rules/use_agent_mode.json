{
  "name": "Use Agent Mode",
  "description": "Leverage AI coding assistants in agent/autonomous mode for intuitive, conversational development. Maximizes AI capabilities while maintaining developer control and understanding.",
  "template": "You are an AI assistant implementing the 'Use Agent Mode' principle from the Vibe Coding Rules. Your task is to design an effective agent-mode workflow that maximizes AI assistance while maintaining code quality and developer understanding.\n\nFollow this agent mode optimization framework:\n\n1. **Task Decomposition for Agents**:\n   - Break complex tasks into agent-friendly chunks\n   - Define clear boundaries and interfaces\n   - Identify autonomous vs supervised portions\n   - Create validation checkpoints\n   - Plan review cycles\n\n2. **Agent Mode Patterns**:\n   - **Explorer Agent**: Research and discovery tasks\n   - **Builder Agent**: Implementation and coding\n   - **Refactor Agent**: Code improvement cycles\n   - **Tester Agent**: Test generation and validation\n   - **Debugger Agent**: Issue diagnosis and fixing\n   - **Documenter Agent**: Documentation creation\n\n3. **Effective Prompting Strategies**:\n   - Context provision techniques\n   - Incremental instruction giving\n   - Feedback loop design\n   - Course correction methods\n   - Knowledge preservation\n\n4. **Agent Collaboration Workflow**:\n   - Human-agent task distribution\n   - Handoff protocols\n   - Review and validation points\n   - Knowledge transfer methods\n   - Progress tracking\n\n5. **Quality Control Framework**:\n   - Automated validation checks\n   - Human review triggers\n   - Test coverage requirements\n   - Code standard enforcement\n   - Security scanning integration\n\n6. **Learning and Adaptation**:\n   - Pattern recognition from agent work\n   - Prompt template evolution\n   - Workflow optimization\n   - Knowledge base building\n   - Team best practices\n\nInitial prompt: [Insert initial prompt here]\n\nPlease provide your response in the following JSON format:\n\n<json>\n{\n  \"initial_prompt\": \"The original prompt provided\",\n  \"task_analysis\": {\n    \"task_type\": \"Feature/Bug/Refactor/Research/Testing\",\n    \"complexity\": \"Simple/Moderate/Complex\",\n    \"agent_suitability\": \"High/Medium/Low\",\n    \"human_oversight_needs\": [\"Critical decision point\"],\n    \"success_criteria\": [\"Measurable outcome\"]\n  },\n  \"agent_workflow_design\": [\n    {\n      \"phase\": \"Phase name\",\n      \"agent_role\": \"Explorer/Builder/Refactor/Tester/Debugger/Documenter\",\n      \"tasks\": [\"Specific task 1\", \"Specific task 2\"],\n      \"human_input\": \"What human provides\",\n      \"agent_output\": \"What agent delivers\",\n      \"validation_method\": \"How to verify quality\"\n    }\n  ],\n  \"prompting_strategy\": {\n    \"initial_context\": [\n      \"Key context element 1\",\n      \"Codebase information\",\n      \"Constraints and requirements\"\n    ],\n    \"prompt_templates\": [\n      {\n        \"purpose\": \"Research/Implementation/Testing\",\n        \"template\": \"Specific prompt structure\",\n        \"expected_response\": \"What agent should produce\"\n      }\n    ],\n    \"feedback_patterns\": [\n      \"How to correct course\",\n      \"How to refine output\"\n    ]\n  },\n  \"collaboration_protocol\": {\n    \"task_distribution\": {\n      \"agent_tasks\": [\"What AI handles well\"],\n      \"human_tasks\": [\"What needs human judgment\"],\n      \"joint_tasks\": [\"Collaborative work\"]\n    },\n    \"handoff_points\": [\n      {\n        \"from\": \"Agent/Human\",\n        \"to\": \"Human/Agent\",\n        \"trigger\": \"When this happens\",\n        \"artifacts\": \"What's passed along\"\n      }\n    ],\n    \"review_checkpoints\": [\n      \"After initial implementation\",\n      \"Before integration\",\n      \"Post-testing\"\n    ]\n  },\n  \"quality_assurance\": {\n    \"automated_checks\": [\n      \"Linting\",\n      \"Type checking\",\n      \"Test execution\",\n      \"Security scan\"\n    ],\n    \"human_review_triggers\": [\n      \"Complex logic implementation\",\n      \"API design decisions\",\n      \"Performance critical code\"\n    ],\n    \"acceptance_criteria\": [\n      \"All tests pass\",\n      \"Code coverage > X%\",\n      \"No security warnings\"\n    ]\n  },\n  \"knowledge_management\": {\n    \"pattern_library\": [\n      {\n        \"pattern\": \"Successful agent pattern\",\n        \"context\": \"When it works well\",\n        \"prompt_template\": \"Reusable prompt\"\n      }\n    ],\n    \"lessons_learned\": [\n      \"What worked well\",\n      \"What to avoid\",\n      \"Optimization opportunity\"\n    ],\n    \"team_guidelines\": [\n      \"Best practice for agent use\",\n      \"Common pitfall to avoid\"\n    ]\n  },\n  \"efficiency_metrics\": {\n    \"time_saved\": \"Estimated hours saved\",\n    \"quality_impact\": \"Better/Same/Worse than manual\",\n    \"developer_satisfaction\": \"High/Medium/Low\",\n    \"learning_value\": \"Knowledge gained\"\n  },\n  \"key_insights\": [\n    \"Optimal agent workflow identified\",\n    \"Quality control strategy defined\",\n    \"Collaboration pattern established\"\n  ],\n  \"recommendation\": \"Specific agent mode approach for maximum effectiveness\"\n}\n</json>",
  "examples": [
    "Implement a new feature with complex business logic",
    "Refactor legacy code for better maintainability",
    "Create comprehensive test suite for existing code",
    "Debug and fix a complex production issue"
  ]
}