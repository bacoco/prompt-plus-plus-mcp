{
  "name": "Fractal Recursive Decomposition",
  "description": "Self-similar problem decomposition that reveals patterns across scales. Perfect for complex systems where the same structures repeat at different levels. Use when problems exhibit recursive properties or need multi-scale analysis.",
  "template": "Activate the Fractal Recursive Decomposition Engine to reveal self-similar patterns and scale-invariant solutions.\n\nInitial Prompt: [Insert initial prompt here]\n\n# Fractal Analysis Framework\n\n## Scale Discovery Phase\n\n### Pattern Recognition Across Scales\n- **Macro Scale (System Level)**: How does this problem manifest at the largest scale?\n- **Meso Scale (Component Level)**: What patterns emerge at intermediate scales?\n- **Micro Scale (Element Level)**: How do the smallest units exhibit similar patterns?\n- **Meta Scale (Context Level)**: How does this pattern fit into even larger systems?\n\n### Self-Similarity Identification\n- **Structural Fractals**: Same organizational patterns at different scales\n- **Functional Fractals**: Same processes operating at different levels\n- **Behavioral Fractals**: Same dynamics repeating across scales\n- **Temporal Fractals**: Same patterns recurring across time scales\n\n## Recursive Decomposition Protocol\n\n### Level 1: Primary Decomposition\n1. **Identify Core Pattern**: What is the fundamental repeating structure?\n2. **Define Scale Parameters**: What dimensions define the scaling?\n3. **Map Transformation Rules**: How does the pattern change between scales?\n4. **Establish Boundary Conditions**: Where does the fractal pattern break down?\n\n### Level 2: Recursive Application\n- **Self-Reference Analysis**: How does each part contain the whole?\n- **Infinite Regress Management**: When to stop the decomposition?\n- **Cross-Scale Communication**: How do different scales interact?\n- **Emergent Properties**: What new properties arise at each scale?\n\n### Level 3: Scale Integration\n- **Bottom-Up Emergence**: How do micro patterns create macro behavior?\n- **Top-Down Influence**: How do macro constraints shape micro patterns?\n- **Scale-Free Connections**: What relationships are independent of scale?\n- **Scaling Laws**: What mathematical relationships govern the scaling?\n\n## Fractal Problem-Solving Methods\n\n### Divide and Conquer 2.0\n- **Recursive Subdivision**: Break problems into self-similar subproblems\n- **Solution Composition**: Combine solutions across scales\n- **Pattern Propagation**: Use solutions from one scale to inform others\n- **Holographic Problem Solving**: Each part contains information about the whole\n\n### Multi-Scale Optimization\n- **Local Optima**: Best solutions at each scale independently\n- **Global Harmony**: Solutions that work well across all scales\n- **Scale Transition Smoothing**: Minimize disruption between scale boundaries\n- **Adaptive Scaling**: Dynamic adjustment of scale boundaries\n\n## Fractal Design Principles\n\n### Self-Similarity by Design\n- **Modular Architecture**: Components that mirror the whole system\n- **Recursive APIs**: Interfaces that work the same at all scales\n- **Scale-Invariant Metrics**: Measurements that remain meaningful across scales\n- **Nested Hierarchies**: Organizational structures that repeat their pattern\n\n### Emergence Management\n- **Controlled Emergence**: Encouraging beneficial emergent properties\n- **Emergence Prediction**: Anticipating properties that arise from scaling\n- **Multi-Scale Feedback**: Information flow between scales\n- **Adaptive Complexity**: Systems that adjust their complexity automatically\n\n## Implementation Strategy\n\n### Fractal Development Process\n1. **Pattern Identification**: Find the core repeating structure\n2. **Scale Mapping**: Define how the pattern scales up and down\n3. **Recursive Implementation**: Build each scale using the same principles\n4. **Integration Testing**: Verify seamless operation across scales\n5. **Emergent Validation**: Confirm desired emergent properties appear\n\nOnly provide the output in the following JSON format enclosed in <json> tags:\n\n<json>\n{\n\"initial_prompt_evaluation\": \"Analysis of recursive patterns, scale-dependent structures, and self-similar elements in the original prompt\",\n\"refined_prompt\": \"Fractally-enhanced prompt with recursive decomposition, multi-scale analysis, and self-similar solution architecture\",\n\"explanation_of_refinements\": \"Detailed explanation of fractal principles applied, scale relationships identified, and how the prompt now reveals patterns across multiple levels of analysis\"\n}\n</json>",
  "examples": [
    "Design an organizational structure for a growing company",
    "Create a learning curriculum that scales from beginner to expert",
    "Build a communication protocol for distributed systems",
    "Develop a city planning strategy"
  ]
}