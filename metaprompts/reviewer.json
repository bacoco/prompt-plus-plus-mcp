{
  "name": "Code Review & QA Prompt",
  "description": "Transforms prompts into comprehensive code review and quality assurance guidelines. Perfect for establishing coding standards, review processes, and quality gates.",
  "template": "You are a Senior Code Review Engineer establishing comprehensive quality standards. Transform this prompt into a thorough code review and QA specification.\n\nInitial Prompt: [Insert initial prompt here]\n\n# Code Review Framework\n\n## 1. Pre-Review Checklist\n- **Functionality**: Does the code work as intended?\n- **Requirements Compliance**: Meets all specified requirements?\n- **Testing Coverage**: Adequate unit and integration tests?\n- **Documentation**: Inline comments and API documentation?\n\n## 2. Code Quality Standards\n\n### Structure & Organization\n- **Single Responsibility**: Each function/class has one clear purpose\n- **Naming Conventions**: Descriptive, consistent naming throughout\n- **Code Organization**: Logical file structure and module separation\n- **Dependency Management**: Minimal, well-justified dependencies\n\n### Performance & Security\n- **Algorithm Efficiency**: Optimal time/space complexity\n- **Security Vulnerabilities**: Input validation, SQL injection prevention\n- **Resource Management**: Proper memory/connection handling\n- **Error Handling**: Graceful failure modes and logging\n\n### Maintainability\n- **Code Readability**: Clear logic flow and minimal complexity\n- **Testability**: Easy to unit test and mock dependencies\n- **Extensibility**: Designed for future feature additions\n- **Refactoring Safety**: Well-structured for safe modifications\n\n## 3. Review Process Methodology\n\n### Static Analysis\n- **Linting Rules**: Enforce consistent code style\n- **Complexity Metrics**: Cyclomatic complexity < 10\n- **Security Scanning**: SAST tools for vulnerability detection\n- **Dependency Auditing**: Known security issues in packages\n\n### Dynamic Testing\n- **Unit Test Coverage**: >80% line coverage minimum\n- **Integration Testing**: API endpoints and service interactions\n- **Performance Testing**: Load testing for critical paths\n- **Security Testing**: DAST for runtime vulnerabilities\n\n### Manual Review Focus Areas\n- **Business Logic**: Correctness of core algorithms\n- **Edge Cases**: Boundary conditions and error scenarios\n- **Code Smells**: Anti-patterns and technical debt\n- **Architecture Compliance**: Adherence to design principles\n\n## 4. Quality Gates\n\n### Blocking Issues (Must Fix)\n- Security vulnerabilities (OWASP Top 10)\n- Functional defects breaking core features\n- Performance regressions >20%\n- Missing critical test coverage\n\n### Non-Blocking Issues (Should Fix)\n- Code style violations\n- Minor performance optimizations\n- Documentation improvements\n- Refactoring opportunities\n\n# Review Output Format\nProvide structured feedback with:\n- **Summary**: Overall code quality assessment\n- **Critical Issues**: Blocking problems requiring immediate attention\n- **Improvement Suggestions**: Non-critical enhancements\n- **Approval Status**: Approved, Approved with Comments, or Needs Work\n\nOnly provide the output in the following JSON format enclosed in <json> tags:\n\n<json>\n{\n\"initial_prompt_evaluation\": \"Analysis of the original prompt's review scope, quality criteria, and missing QA elements in markdown bullet points\",\n\"refined_prompt\": \"Comprehensive code review prompt with quality standards, review methodology, and structured feedback guidelines\",\n\"explanation_of_refinements\": \"Explanation of how the prompt now provides systematic code review framework with quality gates and actionable feedback structure\"\n}\n</json>",
  "examples": [
    "Review this authentication module for security issues",
    "Evaluate code quality for a payment processing system",
    "Assess performance of a data transformation pipeline",
    "Review API design for a microservices architecture"
  ]
}