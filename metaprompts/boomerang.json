{
  "name": "Boomerang Code Development",
  "description": "Iterative development approach with feedback loops. Perfect for complex coding tasks requiring multiple iterations, testing, and refinement. Use when you need code that evolves through testing and feedback cycles.",
  "template": "Apply the Boomerang Development Methodology to transform this coding prompt into an iterative, self-improving development cycle.\n\nInitial Prompt: [Insert initial prompt here]\n\n# Boomerang Development Cycle\n\n## Phase 1: Launch (Initial Implementation)\n- **Requirements Analysis**: Break down the problem into core components\n- **Technical Specification**: Define interfaces, data structures, and algorithms\n- **MVP Implementation**: Create minimal working version\n- **Initial Testing Strategy**: Unit tests and basic validation\n\n## Phase 2: Flight (Development & Testing)\n- **Iterative Development**: Implement features incrementally\n- **Continuous Testing**: Test-driven development with comprehensive coverage\n- **Code Review Checkpoints**: Quality gates at each iteration\n- **Performance Profiling**: Identify bottlenecks early\n\n## Phase 3: Return (Feedback & Refinement)\n- **Feedback Collection**: User testing, performance metrics, code analysis\n- **Gap Analysis**: Compare actual vs expected outcomes\n- **Refactoring Strategy**: Code optimization and architectural improvements\n- **Documentation Updates**: Reflect learnings and design decisions\n\n## Phase 4: Re-Launch (Enhanced Iteration)\n- **Enhanced Requirements**: Incorporate feedback into new requirements\n- **Improved Implementation**: Apply lessons learned\n- **Advanced Testing**: Integration, load, and security testing\n- **Deployment Strategy**: Staging, canary releases, monitoring\n\n# Development Best Practices\n- **Clean Code Principles**: SOLID, DRY, KISS\n- **Design Patterns**: Apply appropriate patterns for the problem domain\n- **Error Handling**: Comprehensive exception management and logging\n- **Security Considerations**: Input validation, authentication, authorization\n- **Scalability Planning**: Consider future growth and optimization\n\n# Code Quality Metrics\n- **Complexity Analysis**: Cyclomatic complexity, maintainability index\n- **Test Coverage**: Aim for >80% code coverage with meaningful tests\n- **Performance Benchmarks**: Response times, throughput, resource usage\n- **Code Review Criteria**: Readability, efficiency, security, maintainability\n\n# Iterative Improvement Loop\n1. **Implement** → 2. **Test** → 3. **Measure** → 4. **Learn** → 5. **Refine** → (Repeat)\n\nOnly provide the output in the following JSON format enclosed in <json> tags:\n\n<json>\n{\n\"initial_prompt_evaluation\": \"Assessment of the original prompt's development scope, technical complexity, and iteration requirements in markdown bullet points\",\n\"refined_prompt\": \"Comprehensive iterative development prompt with testing cycles, feedback loops, and continuous improvement methodology\",\n\"explanation_of_refinements\": \"Explanation of how boomerang methodology transforms the prompt into an iterative development process with quality gates and feedback cycles\"\n}\n</json>",
  "examples": [
    "Build a REST API for user management",
    "Create a data processing pipeline",
    "Develop a web application with authentication",
    "Implement a caching system for database queries"
  ]
}